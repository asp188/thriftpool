/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package com.phatduckk.thriftpool.thriftpool.testhelper.testthrift;

import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.protocol.*;

/**
 * *********************************
 *  zee structs
 * *********************************
 */
public class Address implements TBase<Address._Fields>, java.io.Serializable, Cloneable, Comparable<Address> {
  private static final TStruct STRUCT_DESC = new TStruct("Address");

  private static final TField STREET_ADDRESS_FIELD_DESC = new TField("streetAddress", TType.STRING, (short)1);
  private static final TField CITY_FIELD_DESC = new TField("city", TType.STRING, (short)2);
  private static final TField STATE_FIELD_DESC = new TField("state", TType.STRING, (short)3);
  private static final TField ZIP_FIELD_DESC = new TField("zip", TType.I32, (short)4);

  public String streetAddress;
  public String city;
  public String state;
  public int zip;

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements TFieldIdEnum {
    STREET_ADDRESS((short)1, "streetAddress"),
    CITY((short)2, "city"),
    STATE((short)3, "state"),
    ZIP((short)4, "zip");

    private static final Map<Integer, _Fields> byId = new HashMap<Integer, _Fields>();
    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byId.put((int)field._thriftId, field);
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      return byId.get(fieldId);
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ZIP_ISSET_ID = 0;
  private BitSet __isset_bit_vector = new BitSet(1);

  public static final Map<_Fields, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new EnumMap<_Fields, FieldMetaData>(_Fields.class) {{
    put(_Fields.STREET_ADDRESS, new FieldMetaData("streetAddress", TFieldRequirementType.DEFAULT,
        new FieldValueMetaData(TType.STRING)));
    put(_Fields.CITY, new FieldMetaData("city", TFieldRequirementType.DEFAULT,
        new FieldValueMetaData(TType.STRING)));
    put(_Fields.STATE, new FieldMetaData("state", TFieldRequirementType.DEFAULT,
        new FieldValueMetaData(TType.STRING)));
    put(_Fields.ZIP, new FieldMetaData("zip", TFieldRequirementType.DEFAULT,
        new FieldValueMetaData(TType.I32)));
  }});

  static {
    FieldMetaData.addStructMetaDataMap(Address.class, metaDataMap);
  }

  public Address() {
  }

  public Address(
    String streetAddress,
    String city,
    String state,
    int zip)
  {
    this();
    this.streetAddress = streetAddress;
    this.city = city;
    this.state = state;
    this.zip = zip;
    setZipIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Address(Address other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    if (other.isSetStreetAddress()) {
      this.streetAddress = other.streetAddress;
    }
    if (other.isSetCity()) {
      this.city = other.city;
    }
    if (other.isSetState()) {
      this.state = other.state;
    }
    this.zip = other.zip;
  }

  public Address deepCopy() {
    return new Address(this);
  }

  @Deprecated
  public Address clone() {
    return new Address(this);
  }

  public String getStreetAddress() {
    return this.streetAddress;
  }

  public Address setStreetAddress(String streetAddress) {
    this.streetAddress = streetAddress;
    return this;
  }

  public void unsetStreetAddress() {
    this.streetAddress = null;
  }

  /** Returns true if field streetAddress is set (has been asigned a value) and false otherwise */
  public boolean isSetStreetAddress() {
    return this.streetAddress != null;
  }

  public void setStreetAddressIsSet(boolean value) {
    if (!value) {
      this.streetAddress = null;
    }
  }

  public String getCity() {
    return this.city;
  }

  public Address setCity(String city) {
    this.city = city;
    return this;
  }

  public void unsetCity() {
    this.city = null;
  }

  /** Returns true if field city is set (has been asigned a value) and false otherwise */
  public boolean isSetCity() {
    return this.city != null;
  }

  public void setCityIsSet(boolean value) {
    if (!value) {
      this.city = null;
    }
  }

  public String getState() {
    return this.state;
  }

  public Address setState(String state) {
    this.state = state;
    return this;
  }

  public void unsetState() {
    this.state = null;
  }

  /** Returns true if field state is set (has been asigned a value) and false otherwise */
  public boolean isSetState() {
    return this.state != null;
  }

  public void setStateIsSet(boolean value) {
    if (!value) {
      this.state = null;
    }
  }

  public int getZip() {
    return this.zip;
  }

  public Address setZip(int zip) {
    this.zip = zip;
    setZipIsSet(true);
    return this;
  }

  public void unsetZip() {
    __isset_bit_vector.clear(__ZIP_ISSET_ID);
  }

  /** Returns true if field zip is set (has been asigned a value) and false otherwise */
  public boolean isSetZip() {
    return __isset_bit_vector.get(__ZIP_ISSET_ID);
  }

  public void setZipIsSet(boolean value) {
    __isset_bit_vector.set(__ZIP_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case STREET_ADDRESS:
      if (value == null) {
        unsetStreetAddress();
      } else {
        setStreetAddress((String)value);
      }
      break;

    case CITY:
      if (value == null) {
        unsetCity();
      } else {
        setCity((String)value);
      }
      break;

    case STATE:
      if (value == null) {
        unsetState();
      } else {
        setState((String)value);
      }
      break;

    case ZIP:
      if (value == null) {
        unsetZip();
      } else {
        setZip((Integer)value);
      }
      break;

    }
  }

  public void setFieldValue(int fieldID, Object value) {
    setFieldValue(_Fields.findByThriftIdOrThrow(fieldID), value);
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case STREET_ADDRESS:
      return getStreetAddress();

    case CITY:
      return getCity();

    case STATE:
      return getState();

    case ZIP:
      return new Integer(getZip());

    }
    throw new IllegalStateException();
  }

  public Object getFieldValue(int fieldId) {
    return getFieldValue(_Fields.findByThriftIdOrThrow(fieldId));
  }

  /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    switch (field) {
    case STREET_ADDRESS:
      return isSetStreetAddress();
    case CITY:
      return isSetCity();
    case STATE:
      return isSetState();
    case ZIP:
      return isSetZip();
    }
    throw new IllegalStateException();
  }

  public boolean isSet(int fieldID) {
    return isSet(_Fields.findByThriftIdOrThrow(fieldID));
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Address)
      return this.equals((Address)that);
    return false;
  }

  public boolean equals(Address that) {
    if (that == null)
      return false;

    boolean this_present_streetAddress = true && this.isSetStreetAddress();
    boolean that_present_streetAddress = true && that.isSetStreetAddress();
    if (this_present_streetAddress || that_present_streetAddress) {
      if (!(this_present_streetAddress && that_present_streetAddress))
        return false;
      if (!this.streetAddress.equals(that.streetAddress))
        return false;
    }

    boolean this_present_city = true && this.isSetCity();
    boolean that_present_city = true && that.isSetCity();
    if (this_present_city || that_present_city) {
      if (!(this_present_city && that_present_city))
        return false;
      if (!this.city.equals(that.city))
        return false;
    }

    boolean this_present_state = true && this.isSetState();
    boolean that_present_state = true && that.isSetState();
    if (this_present_state || that_present_state) {
      if (!(this_present_state && that_present_state))
        return false;
      if (!this.state.equals(that.state))
        return false;
    }

    boolean this_present_zip = true;
    boolean that_present_zip = true;
    if (this_present_zip || that_present_zip) {
      if (!(this_present_zip && that_present_zip))
        return false;
      if (this.zip != that.zip)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(Address other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    Address typedOther = (Address)other;

    lastComparison = Boolean.valueOf(isSetStreetAddress()).compareTo(isSetStreetAddress());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(streetAddress, typedOther.streetAddress);
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetCity()).compareTo(isSetCity());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(city, typedOther.city);
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetState()).compareTo(isSetState());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(state, typedOther.state);
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetZip()).compareTo(isSetZip());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(zip, typedOther.zip);
    if (lastComparison != 0) {
      return lastComparison;
    }
    return 0;
  }

  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      _Fields fieldId = _Fields.findByThriftId(field.id);
      if (fieldId == null) {
        TProtocolUtil.skip(iprot, field.type);
      } else {
        switch (fieldId) {
          case STREET_ADDRESS:
            if (field.type == TType.STRING) {
              this.streetAddress = iprot.readString();
            } else {
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case CITY:
            if (field.type == TType.STRING) {
              this.city = iprot.readString();
            } else {
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case STATE:
            if (field.type == TType.STRING) {
              this.state = iprot.readString();
            } else {
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case ZIP:
            if (field.type == TType.I32) {
              this.zip = iprot.readI32();
              setZipIsSet(true);
            } else {
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
        }
        iprot.readFieldEnd();
      }
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.streetAddress != null) {
      oprot.writeFieldBegin(STREET_ADDRESS_FIELD_DESC);
      oprot.writeString(this.streetAddress);
      oprot.writeFieldEnd();
    }
    if (this.city != null) {
      oprot.writeFieldBegin(CITY_FIELD_DESC);
      oprot.writeString(this.city);
      oprot.writeFieldEnd();
    }
    if (this.state != null) {
      oprot.writeFieldBegin(STATE_FIELD_DESC);
      oprot.writeString(this.state);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(ZIP_FIELD_DESC);
    oprot.writeI32(this.zip);
    oprot.writeFieldEnd();
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Address(");
    boolean first = true;

    sb.append("streetAddress:");
    if (this.streetAddress == null) {
      sb.append("null");
    } else {
      sb.append(this.streetAddress);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("city:");
    if (this.city == null) {
      sb.append("null");
    } else {
      sb.append(this.city);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("state:");
    if (this.state == null) {
      sb.append("null");
    } else {
      sb.append(this.state);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("zip:");
    sb.append(this.zip);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }

}

